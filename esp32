#include <esp_now.h>
#include <WiFi.h>
#include <HX711.h>

// --- HX711 ---
// Pinos definidos para ESP32. DT e SCK são os da sua sonda.
#define DT 33 
#define SCK 32 

// --- Configuração do ESP-NOW ---
// Endereço MAC do ESP32 receptor (precisa ser alterado para o MAC do seu receptor)
uint8_t broadcastAddress[] = {0x34, 0x5F, 0x45, 0xE7, 0x6D, 0x44}; 

// Estrutura para os dados a serem enviados
typedef struct message {
  unsigned long timestamp;
  float entrada_mv;
  String classificacao;
} message;

message dataSonda;
esp_now_peer_info_t peerInfo;
HX711 scale;

// --- Variáveis ---
float entrada_mv = 0;
String classificacao = "";

// Função para monitorar o status do envio
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nStatus de Envio: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Sucesso" : "Falha");
}

void setup() {
  Serial.begin(115200);

  // Inicializa o WiFi em modo Station
  WiFi.mode(WIFI_STA);

  // Inicializa o ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Erro ao inicializar ESP-NOW");
    return;
  }

  // Registra a função de callback para o status de envio
  esp_now_register_send_cb(OnDataSent);

  // Configura e adiciona o receptor (peer)
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Falha ao adicionar peer");
    return;
  }

  // Inicializa o HX711
  scale.begin(DT, SCK);
  scale.set_gain(128);

  Serial.println("Sistema ESP-NOW para Sonda iniciado.");
  delay(500);
}

void loop() {
  if (scale.is_ready()) {
    long leitura = scale.read();

    // Calibração
    entrada_mv = (leitura / 8388607.0) * 1200.0 * 0.0123;

    // Classificação
    if (entrada_mv > 5.7) {
      classificacao = "Rica";
    } else if (entrada_mv >= 3.5) {
      classificacao = "Ideal";
    } else {
      classificacao = "Pobre";
    }

    // Preenche a estrutura com os dados
    dataSonda.timestamp = millis();
    dataSonda.entrada_mv = entrada_mv;
    
    // Converte a String para um array de bytes para enviar no ESP-NOW
    char classificacao_char[classificacao.length() + 1];
    classificacao.toCharArray(classificacao_char, classificacao.length() + 1);

    // Envia os dados
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &dataSonda, sizeof(dataSonda));

    if (result == ESP_OK) {
      Serial.println("Dados enviados com sucesso!");
    } else {
      Serial.println("Erro ao enviar os dados!");
    }

    // Saída serial para monitoramento
    if (entrada_mv > 0.9) {
      Serial.print("Tensao (mV): ");
      Serial.print(entrada_mv, 2);
      Serial.print(" | Mistura: ");
      Serial.println(classificacao);
    }
  }
  delay(300);
}
